pipeline {
    agent any
    stages {
        // 1. 깃 클론
        stage('git clone') {
//             steps {
//                 def branchName = env.BRANCH_NAME
//                 echo "Checking out branch: ${branchName}"
//                 git branch: branchName, url: 'https://github.com/beyond-sw-camp/be06-4th-SABUJAKS'
//             }
            script {
                // 현재 푸시된 브랜치 이름을 Jenkins 환경 변수에서 가져옵니다.
                def branchName = env.BRANCH_NAME
                echo "Checking out branch: ${branchName}"

                // 'git' 스텝을 사용하여 지정된 브랜치를 체크아웃합니다.
                git branch: branchName, url: 'https://github.com/beyond-sw-camp/be06-4th-SABUJAKS.git'
            }
        }


        // 2. 권한 추가
        stage('Add Permission') {
            steps {
                sh 'chmod +x /var/lib/jenkins/workspace/test4/backend/gradlew'
            }
        }

        // 3. gradle 빌드
        stage('Build') {
            steps {
                dir('/var/lib/jenkins/workspace/test4/backend') {
                    sh './gradlew bootJar'
                }
            }
        }

        // 4. Docker 빌드
        stage('Docker Build') {
            steps {
                script {
                    sh 'docker build -f cicd/jenkins/backend/Dockerfile -t sabujaks/backend:1.$BUILD_ID .'
                }
            }
        }

        // 5. Docker Push
        stage('Docker Push') {
            steps {
                script {
                    // Docker 로그인
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_credential', usernameVariable: 'DOCKER_EMAIL', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u ${DOCKER_EMAIL} -p ${DOCKER_PASSWORD}"
                    }
                    // Docker Push
                    sh 'docker push sabujaks/backend:1.$BUILD_ID'
                }
            }
        }

        // 5. SSH 전송
        stage('SSH transfer') {
            steps {
                // SSH 전송 플러그인 사용
                sshPublisher(
                    // 오류 발생 시 진행을 멈춤
                    continueOnError: false,
                    // 오류 발생 시 파이프라인을 실패시킴
                    failOnError: true,
                    // 전송자 목록
                    publishers: [
                        // SSH 전송 설명
                        sshPublisherDesc(
                            // SSH 서버 설정 이름 지정 ( master 노드 )
                            configName: "k8s-master",
                            // 자세한 출력 모드 활성화
                            verbose: true,
                            transfers: [
                                sshTransfer(
                                    // 전송할 파일 지정
                                    sourceFiles: "cicd/k8s/backend/backend-deployment.yml",
                                    // 원격 디렉토리 지정 ( 원격서버로 파일을 전송할 위치 )
                                    remoteDirectory: "/home/test/",
                                    // 전송 후 야멜 파일의 VERSION을 파이프라인 빌드 숫자로 변경
                                    // backend-deployment 야멜 파일 실행
                                    execCommand: '''
                                        sed -i "s/latest/1.$BUILD_ID/g" cicd/k8s/backend/backend-deployment.yml
                                        kubectl apply -f /home/test/cicd/k8s/backend/backend-deployment.yml
                                    '''
                                )
                            ]
                        )
                    ]
                )
            }
        }
    }
}
